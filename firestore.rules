rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check user role from their user document
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isPrivilegedUser(userId) {
      let userRole = getUserRole(userId);
      return userRole == 'Admin' || userRole == 'Supervisor';
    }

    // Public read access for vehicles
    match /vehicles/{vehicleId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Users can only read/update their own profile
    // Admins/Supervisors can read all user profiles
    match /users/{userId} {
      allow get, update: if request.auth != null && request.auth.uid == userId;
      allow list: if request.auth != null && isPrivilegedUser(request.auth.uid);
    }
    
    // Activity Logs can only be read by privileged users
    match /activityLogs/{logId} {
        allow read: if request.auth != null && isPrivilegedUser(request.auth.uid);
        allow write: if request.auth != null; // Any authenticated user can trigger a log write
    }

    // All other collections are only accessible by authenticated users.
    // This is a catch-all, specific rules above take precedence.
    match /{path=**}/documents/{documentId} {
       allow read, write: if request.auth != null;
    }
  }
}
