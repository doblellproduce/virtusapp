rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin roles
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Supervisor'];
    }

    // Users: Admins can manage all. Users can only see/edit their own profile.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow create: if isAdmin(); // Only admins can create new staff users
      allow delete: if isAdmin();
    }
    
    // Customers: Admins can manage all. Allow authenticated users to create their own customer profile.
    match /customers/{customerId} {
      allow read, update, delete: if isAdmin();
      allow create: if request.auth.uid == customerId;
    }

    // Vehicles, Maintenance, Expenses, Reviews: Public read, admin write.
    match /vehicles/{vehicleId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /maintenanceLogs/{logId} {
       allow read, create, update, delete: if isAdmin();
    }
    
    match /expenses/{expenseId} {
       allow read, create, update, delete: if isAdmin();
    }
    
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth.uid != null; // Any signed-in user can leave a review
      allow update, delete: if isAdmin();
    }

    // Reservations & Invoices: Users can manage their own, admins can manage all.
    match /reservations/{reservationId} {
      allow create: if request.auth.uid != null;
      allow read, update: if get(/databases/$(database)/documents/reservations/$(reservationId)).data.customerId == request.auth.uid || isAdmin();
      allow delete: if isAdmin();
    }
    
     match /invoices/{invoiceId} {
        allow read, create, update, delete: if isAdmin();
    }
    
    // Contracts & Activity Logs: Admin-only access
    match /contracts/{contractId} {
        allow read, create, update, delete: if isAdmin();
    }

    match /activityLogs/{logId} {
      allow read, create: if isAdmin();
    }
  }
}
