rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get the user's role and tenantId from the users collection
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Helper function to check if a user belongs to a specific tenant
    function isUserOfTenant(userId, tenantId) {
      return getUserData(userId).tenantId == tenantId;
    }
    
    // Helper function to check user role
    function isRole(userId, role) {
      return getUserData(userId).role == role;
    }

    function isSuperAdmin(userId) {
      return isRole(userId, 'SuperAdmin');
    }

    // Tenants can be read by any authenticated user (to get their own tenant name, etc.)
    // But only SuperAdmins can create, update or delete them.
    match /tenants/{tenantId} {
      allow read: if request.auth != null;
      allow write: if isSuperAdmin(request.auth.uid);
    }

    // A user can only read their own profile, but can update it.
    // SuperAdmins can read any user profile.
    // No one can delete a user doc directly except SuperAdmins (deletion should happen via a Cloud Function).
    match /users/{userId} {
      allow get: if request.auth.uid == userId || isSuperAdmin(request.auth.uid);
      allow list: if isSuperAdmin(request.auth.uid); // Only SuperAdmins can list all users
      allow update: if request.auth.uid == userId || isSuperAdmin(request.auth.uid);
      allow create, delete: if isSuperAdmin(request.auth.uid);
    }
    
    // Multi-tenant collections: Data is partitioned by tenantId
    // The user must belong to the tenant to access its data.
    match /{collection}/{docId} {
      // This applies to: vehicles, reservations, customers, invoices, expenses, maintenanceLogs, activityLogs, contracts, documents
      allow read, write: if request.auth != null && isUserOfTenant(request.auth.uid, resource.data.tenantId);
    }
  }
}
