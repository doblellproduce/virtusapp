
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an authenticated admin/staff
    function isStaff() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Supervisor', 'Secretary'];
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users collection:
    // Admins can manage all users.
    // Users can read their own profile.
    // Users can create their own profile upon registration.
    match /users/{userId} {
      allow read: if isOwner(userId) || request.auth.uid == userId || isStaff();
      allow write: if isStaff();
      allow create: if request.auth.uid == userId;
    }

    // Collections accessible by Staff
    match /reservations/{reservationId} {
      allow read, write, create, delete: if isStaff();
    }

    match /customers/{customerId} {
      allow read, write, create, delete: if isStaff();
    }

    match /vehicles/{vehicleId} {
      // Allow public read for vehicle details page
      allow get: if true;
      allow list, write, create, delete: if isStaff();
    }
    
    match /documents/{documentId} {
      allow read, write, create, delete: if isStaff();
    }
    
    match /contracts/{contractId} {
       allow read, write, create, delete: if isStaff();
    }

    match /invoices/{invoiceId} {
      allow read, write, create, delete: if isStaff();
    }
    
    match /expenses/{expenseId} {
      allow read, write, create, delete: if isStaff();
    }

    match /maintenanceLogs/{logId} {
       allow read, write, create, delete: if isStaff();
    }

    match /reviews/{reviewId} {
       allow read, write, create, delete: if isStaff();
    }
    
    match /activityLogs/{logId} {
      allow read, create: if isStaff();
      allow update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin'; // Only Admins can delete logs
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
