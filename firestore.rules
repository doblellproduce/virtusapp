rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an authenticated staff member
    function isStaff(userId) {
      let userRole = get(/databases/$(database)/documents/users/$(userId)).data.role;
      return request.auth != null && request.auth.uid == userId && userRole in ['Admin', 'Supervisor', 'Secretary'];
    }
    
    // Helper function to check if a user is an Admin
    function isAdmin(userId) {
       let userRole = get(/databases/$(database)/documents/users/$(userId)).data.role;
       return request.auth != null && request.auth.uid == userId && userRole == 'Admin';
    }

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users Collection
    // Admins can read/write all user profiles.
    // Authenticated users can read their own profile.
    match /users/{userId} {
      allow read: if isAuthenticated() && (isAdmin(request.auth.uid) || request.auth.uid == userId);
      allow write: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // General collections for staff management
    // Staff members can read and write to these collections.
    match /{collection}/{docId} 
      where collection in ['customers', 'vehicles', 'reservations', 'invoices', 'expenses', 'maintenanceLogs', 'documents', 'contracts', 'reviews'] {
      allow read, write: if isStaff(request.auth.uid);
    }
    
    // Activity Logs
    // Only staff can read. Staff can create new logs. No updates or deletes allowed.
    match /activityLogs/{logId} {
      allow read, create: if isStaff(request.auth.uid);
      allow update, delete: if false; // Logs should be immutable
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
