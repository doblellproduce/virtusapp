
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Helper function to check for admin roles
    function isStaff() {
      // Assumes user profile is stored in Firestore
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Supervisor', 'Secretary'];
    }

    // Vehicle Images: Publicly readable, but only staff can write.
    match /vehicles/{allPaths=**} {
      allow read: if true;
      allow write: if isStaff();
    }
    
    // Inspection Photos: Users can only write to their own reservation's inspection folder.
    // Staff can read/write all inspection photos.
    match /inspections/{reservationId}/{type}/{fileName} {
      allow read: if isStaff();
      // This rule is tricky without the customer ID. A more robust rule would involve checking the reservation document.
      // For now, allow any authenticated user to write here. Access will be controlled by secure URLs in Firestore.
      allow write: if request.auth != null; 
    }

    // Signatures: Similar to inspections, authenticated users can write.
    match /signatures/{reservationId}/{type}/{fileName} {
      allow read: if isStaff();
      allow write: if request.auth != null;
    }
    
    // General Documents: Only staff can write. Access control is managed via Firestore document URLs.
    match /documents/{fileName} {
       allow read: if request.auth != null; // Allow authenticated users to read if they have the URL
       allow write: if isStaff();
    }
  }
}
