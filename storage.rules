
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Helper function to check for admin/supervisor roles by reading Firestore
    function isStaff(userId) {
      return get(/databases/(default)/documents/users/$(userId)).data.role in ['Admin', 'Supervisor', 'Secretary'];
    }

    // Vehicle images: Publicly readable, only staff can write/delete
    match /vehicles/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && isStaff(request.auth.uid);
    }
    
    // Inspection photos: Only authenticated users can write to their own reservation's folder. Staff can read all.
    match /inspections/{reservationId}/{allPaths=**} {
        allow read: if request.auth != null && isStaff(request.auth.uid);
        // Users can only write to their own reservation folder, which we check via a Firestore read
        allow write: if request.auth != null && (get(/databases/(default)/documents/reservations/$(reservationId)).data.customerId == request.auth.uid || isStaff(request.auth.uid));
    }
    
    // Signatures: Same logic as inspections
    match /signatures/{reservationId}/{allPaths=**} {
       allow read: if request.auth != null && isStaff(request.auth.uid);
       allow write: if request.auth != null && (get(/databases/(default)/documents/reservations/$(reservationId)).data.customerId == request.auth.uid || isStaff(request.auth.uid));
    }
    
    // General documents: Users can upload, only staff can read/delete
    match /documents/{fileName} {
      allow read: if request.auth != null && isStaff(request.auth.uid);
      allow write: if request.auth != null; // Allows any signed-in user to upload
      allow delete: if request.auth != null && isStaff(request.auth.uid);
    }
  }
}
    