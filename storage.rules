
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check for admin roles
    function isAdmin() {
      // Access the user's custom claims from Firestore
      return firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Supervisor'];
    }
    
    // Public read for vehicle images
    match /vehicles/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Users can upload their own documents/signatures into a folder named after their UID
    match /documents/{userId}/{allPaths=**} {
        allow read, write: if request.auth.uid == userId;
    }
    
    match /signatures/{userId}/{allPaths=**} {
        allow read, write: if request.auth.uid == userId;
    }

    // Admins can access all documents and signatures for management
    match /documents/{allPaths=**} {
      allow read, write: if isAdmin();
    }
    
    match /signatures/{allPaths=**} {
        allow read, write: if isAdmin();
    }

    // Inspections are linked to reservations, check if user owns the reservation
    // This is a more complex rule and might be simplified depending on exact requirements.
    // For now, we allow authenticated users to write.
    match /inspections/{reservationId}/{allPaths=**} {
      allow read, write: if request.auth.uid != null || isAdmin();
    }
  }
}
